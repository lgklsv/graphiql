{
  "pageTitle": {
    "home": "Главная",
    "signup": "Регистрация",
    "login": "Вход",
    "sandbox": "Песочница",
    "error": "Ошибка"
  },
  "button": {
    "signup": "Регистрация",
    "login": "Войти",
    "logout": "Выйти",
    "home": "Главная",
    "sandbox": "Песочница",
    "access": "Получить доступ",
    "docs": "О проекте",
    "start": "Начать",
    "signGithub": "Войти с помощью GitHub",
    "signGoogle": "Войти с помощью Google"
  },
  "home": {
    "introTitle": "<0>GraphQL</0> платформа для разработчиков",
    "introText": "GraphiQL – это универсальная среда разработки для вашего GraphQL API, позволяющая отправлять и обрабатывать запросы быстро, удобно и безопасно.",
    "descriptionGoal": "Главная цель нашего GraphiQL Sandbox — предоставить вам возможность удобно изучать и тестировать ваш GraphQL API.",
    "descriptionText": "GraphiQL Sandbox это GraphQL редактор кода, разработан и поддерживается студентами курса по React от RS School. Среда разработки имеет весь базовый функционал: подсветка синтаксиса, подсказки и автозаполнение при написании запроса, обработка ошибок, поддержка переменных и заголовков, документация API с поиском и поддержкой markdown и многое другое.",
    "featureShowcase": {
      "query": {
        "title": "Отправка GraphQL запросов",
        "text": "Вы можете отправлять GraphQL запросы или мутации с помощью GraphiQL Sandbox. Редактор кода имеет функцию автозаполнение, которая поможет вам быстро выбрать поля из вашей схемы. Наша среда разработки помогает отправлять запросы на GraphQL сервер и также упрощает получение данных."
      },
      "docs": {
        "title": "Документация к API",
        "text": "Панель с документацией к API это одна из самых впечатляющих функций GraphiQl Sandbox. Она позволяет вам изучить всю схему вашего API, типы данных, поля. Также доступен удобный поиск по всем типам в  документации."
      },
      "headers": {
        "title": "Поддержка HTTP заголовков",
        "text": "GraphiQL Sandbox позволяет вам отправлять HTTP заголовки, они нужны, например, для отправки токена для авторизации на вашем API. Чтобы добавить заголовки к запросу, убедитесь, что во вкладке 'Заголовки' вы добавили данные в формате JSON. Кстати, можно добавлять сразу несколько полей."
      }
    },
    "featureGrid": {
      "title": "Еще функционал",
      "codemirror": {
        "title": "Редактор от Codemirror",
        "text": "Все наши редакторы сделаны с помощью codemirror и поддерживают подсветку синтаксиса, подсказки и многое другое."
      },
      "firebase": {
        "title": "Интеграция с Firebase",
        "text": "Мы логиним через Firebase, чтобы вы могли удобно сохранять все ваши запросы, вкладки и настройки."
      },
      "prettify": {
        "title": "Инструменты",
        "text": "Простые, удобные инструменты, которые ускоряют работу. Форматируйте, копируйте запросы и скачивайте ответы API в формате JSON."
      },
      "tabs": {
        "title": "Вкладки",
        "text": "Создавайте новые вкладки, чтобы работать с разными запросами одновременно. Вы также можете легко менять вкладки местами с помощью перетаскивания."
      },
      "shortcuts": {
        "title": "Горячие клавиши",
        "text": "Мы добавили несколько удобных горячих клавиш в нашу среду разработки. Редакторы кода также поддерживают горячие клавиши CodeMirror."
      },
      "translation": {
        "title": "Поддержка двух языков",
        "text": "Среда разработки и все наши сервисы переведены на два языка: Русский и Английский."
      }
    },
    "developerTitle": "Команда"
  },
  "footer": {
    "copyright": "Все права защищены",
    "madeBy": "Создан",
    "screenReader": "Информация о школе RS School"
  },
  "form": {
    "fields": {
      "email": "Адрес эл. почты",
      "password": "Пароль",
      "confirmPsw": "Подтвердить пароль"
    },
    "placeholder": {
      "email": "Адрес электронной почты",
      "password": "Пароль"
    },
    "error": {
      "emptyMail": "Пожалуйста, введите ваш email",
      "invalidMail": "Пожалуйста, введите действительный адрес электронной почты",
      "emptyPsw": "Пожалуйста, введите ваш пароль",
      "invalidPsw": "Пароль должен содержать не менее 8 знаков, включать по крайней мере одну цифру, одну заглавную букву, одну строчную букву и один специальный символ.",
      "notMatchingPsw": "Введенные пароли не совпадают",
      "confirmPsw": "Повторите пароль"
    }
  },
  "signUp": {
    "title": "Создать аккаунт",
    "loginRedirect": "Уже есть аккаунт?",
    "redirectLink": "Войти"
  },
  "logIn": {
    "title": "Войти",
    "signUpRedirect": "Еще нет аккаунта?",
    "redirectLink": "Создать аккаунт",
    "or": "или"
  },
  "sandbox": {
    "newTab": "Без Названия",
    "buttons": {
      "variables": "Переменные",
      "headers": "Заголовки"
    },
    "placeholder": "Введите ваш запрос",
    "tooltips": {
      "docsClose": "Показать документацию",
      "refetch": "Запросить схему (shift + r)",
      "shortcuts": "Все горячие клавиши",
      "settings": "Открыть настройки",
      "execute": "Выполнить запрос (shift + enter)",
      "prettify": {
        "default": "Форматировать (shift + p)",
        "done": "Готово!",
        "error": "Возможно невалидный GraphQL, не получилось форматировать"
      },
      "copy": {
        "query": "Скопировать (shift + c)",
        "response": "Скопировать (shift + alt + c)",
        "done": "Скопировано!"
      },
      "download": "Скачать (JSON) (shift + d)",
      "apiConnection": "Подключить API"
    },
    "response": {
      "error": "{{fieldName}} имеют невалидный JSON формат. Пожалуйста, исправьте ошибки и повторите запрос."
    },
    "errors": {
      "execute": "Не получилось выполнить запрос. Проверьте API или ваше интернет соединение и попробуйте снова.",
      "failedFetch": "Не удалось загрузить GraphQL схему. Проверьте правильность API."
    }
  },
  "notFound": {
    "title": "СТРАНИЦА НЕ НАЙДЕНА",
    "subtitle": "похоже данная страница не существует",
    "homeLink": "перейти на главную"
  },
  "docs": {
    "header": {
      "title": "Дока"
    },
    "explorer": {
      "title": "Схема GraphQL предоставляет корневой тип для каждого вида операций.",
      "sectionTitleField": "Тип поля",
      "sectionTitleRoot": "Корневые типы",
      "sectionTitleAll": "Все типы схем"
    },
    "search": {
      "placeholder": "Поиск (Shift + ⌘ + K)",
      "notFound": "Ничего не найдено"
    }
  },
  "modals": {
    "shortcuts": {
      "title": "Горячие клавиши",
      "columns": {
        "keys": "Комбинация",
        "functions": "Функция"
      },
      "function": {
        "search": "Поиск по документации",
        "query": "Выполнить запрос",
        "prettify": "Форматировать редактор",
        "copy": "Скопировать запрос",
        "refetch": "Запросить GraphQL схему",
        "download": "Скачать ответ в формате JSON"
      },
      "message": "Редакторы кода также поддерживают горячие клавиши CodeMirror."
    },
    "settings": {
      "title": "Настройки",
      "cache": {
        "title": "Включить кеширование",
        "subtitle": "Все GraphQL запросы будут кешироваться. При одинаковом запросе данные ответа будут получены из кеша.",
        "toggler": {
          "on": "Вкл",
          "off": "Выкл"
        }
      },
      "stats": {
        "title": "Показывать статистику",
        "subtitle": "Включает индикаторы с полезной информацией (время запроса, настройка кеша).",
        "toggler": {
          "on": "Вкл",
          "off": "Выкл"
        }
      },
      "clear": {
        "title": "Очистить данные",
        "subtitle": "Удалить все данные, синхронизированные с облаком, и начать заново. Это не приведет к удалению вашей учетной записи.",
        "button": {
          "text": "Очистить",
          "popup": {
            "title": "Очистить синхронизированные с облаком данные?",
            "subtitle": "Вы уверены, что хотите удалить данные? Это действие отменить нельзя.",
            "confirm": "Да",
            "cancel": "Нет"
          }
        }
      }
    }
  },
  "developersList": {
    "alesiaAbaeva": "Алеся Абаева",
    "olegKolosov": "Олег Колосов",
    "mariaErmolaeva": "Мария Ермолаева"
  },
  "firebaseIndicator": {
    "success": {
      "text": "Сохранено",
      "tooltip": "Все изменения сохранены в Firestore"
    },
    "processing": {
      "text": "Сохранение...",
      "tooltip": "Синхронизируем данные с Firestore"
    },
    "error": {
      "text": "Ошибка",
      "tooltip": "Не получилось обновить Firestore"
    },
    "userDataLoading": {
      "text": "Загрузка...",
      "tooltip": "Синхронизируем данные с Firestore"
    }
  },
  "loader": "Загрузка...",
  "firestoreErrors": {
    "getData": "Не удалось получить данные из Firestore ",
    "updateData": "Не удалось обновить данные в Firestore",
    "createData": "Произошла ошибка при создании записи в Firestore",
    "accountExists": "Учетная запить с этим Email уже существует",
    "networkFailed": "Не удалось сделать запрос, проверьте ваше Интернет соединение",
    "wrongPassword": "Неверный пароль, попробуйте снова",
    "noUser": "Аккаунт не найден, зарегистрируйтесь или попробуйте другой аккаунт"
  },
  "errorBoundary": {
    "errorTitle": "Произошла ошибка",
    "defaultMsg": "Что-то пошло не так",
    "errorReset": "Попробовать еще раз",
    "errorReload": "Перезагрузить страницу",
    "errorSignOut": "Произошла ошибка при выходе из учетной записи"
  }
}
