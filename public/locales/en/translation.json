{
  "pageTitle": {
    "home": "Home",
    "signup": "Sign Up",
    "login": "Log In",
    "sandbox": "Sandbox",
    "error": "Error"
  },
  "button": {
    "signup": "Sign Up",
    "login": "Log In",
    "logout": "Log Out",
    "home": "Home",
    "sandbox": "Sandbox",
    "access": "Get access",
    "docs": "Read the Docs",
    "start": "Get Started",
    "signGithub": "Log in with GitHub",
    "signGoogle": "Log in with Google"
  },
  "home": {
    "introTitle": "The <0>GraphQL</0> developer platform",
    "introText": "GraphiQL is the all-purpose IDE for your GraphQL API, empowering developers across your stack to ship early, ship often, and ship safely.",
    "descriptionGoal": "The main goal of our GraphiQL Sandbox is to provide an easy way to explore and test your GraphQL API.",
    "descriptionText": "GraphiQL Sandbox is a GraphQL IDE created and maintained by students of RS School React course. Sandbox ships with basic features such as syntax highlighting, intelligent type ahead of fields, real-time error highlighting and reporting for queries and variables, documentation explorer, search, markdown support, the ability to configure HTTP headers, and so much more.",
    "featureShowcase": {
      "query": {
        "title": "Run a GraphQL query",
        "text": "You can send a GraphQL query or mutation using GraphiQL Sandbox. Code editor has an autocompletion feature and helps you ride through your schema. Our IDE helps in sending requests to the GraphQL server and facilitates the retrieval of data as well."
      },
      "docs": {
        "title": "Docs and schema",
        "text": "The API documentation board is one of the most exciting features of GraphiQl Sandbox. It enables you to preview GraphQL queries, GraphQL type details, and a single field of a given schema. You can also use search bar to look up for some fields."
      },
      "headers": {
        "title": "Send HTTP headers",
        "text": "GraphiQL Sandbox allows you to send requests with HTTP headers, such as a token needed to authenticate a user or some other kind of authorization. Make sure to first switch the tab to “Headers,” and then add your headers as a JSON object. By the way, you can add more than one field."
      }
    },
    "featureGrid": {
      "title": "More features",
      "codemirror": {
        "title": "Codemirror editor",
        "text": "All our editors are made with codemirror and support syntax highlighting, autocomplete and more."
      },
      "firebase": {
        "title": "Firebase integration",
        "text": "We login with Firebase to help you save all your queries, tabs and settings."
      },
      "prettify": {
        "title": "Prettify, copy, download",
        "text": "Simple tools that are nice to have. Prettify, copy query and download response in JSON format."
      },
      "tabs": {
        "title": "Tabs",
        "text": "Create new tabs to work with different queries at the same time. You can easily reorder them with drag-n-drop."
      },
      "shortcuts": {
        "title": "Shortcuts",
        "text": "We provide some useful shortcuts in our IDE. The editors use CodeMirror Key Maps that add more shortcuts."
      },
      "translation": {
        "title": "Two languages support",
        "text": "IDE and the whole service is translated in Russian and English."
      }
    },
    "developerTitle": "Developers"
  },
  "footer": {
    "copyright": "All rights reserved",
    "madeBy": "Engineered by",
    "screenReader": "Explore the info about the RS School"
  },
  "form": {
    "fields": {
      "email": "Email",
      "password": "Password",
      "confirmPsw": "Confirm Password"
    },
    "placeholder": {
      "email": "Email Address",
      "password": "Password"
    },
    "error": {
      "emptyMail": "Please input your Email",
      "invalidMail": "Please input a valid Email",
      "emptyPsw": "Please input your Password",
      "invalidPsw": "Password must contain at least 8 characters including at least one digit, one uppercase letter, one lowercase letter and one special character.",
      "notMatchingPsw": "The two passwords that you entered do not match",
      "confirmPsw": "Please confirm your password"
    }
  },
  "signUp": {
    "title": "Let's get started",
    "loginRedirect": "Have an account?",
    "redirectLink": "Log in"
  },
  "logIn": {
    "title": "Log in",
    "signUpRedirect": "New to GraphiQL?",
    "redirectLink": "Lets get started",
    "or": "or"
  },
  "sandbox": {
    "newTab": "Untitled",
    "buttons": {
      "variables": "Variables",
      "headers": "Headers"
    },
    "placeholder": "Enter your query",
    "tooltips": {
      "docsClose": "Show documentation",
      "refetch": "Re-fetch schema (shift + r)",
      "shortcuts": "Explore all shortcuts",
      "settings": "Open settings",
      "execute": "Execute query (shift + enter)",
      "prettify": {
        "default": "Prettify (shift + p)",
        "done": "Done!",
        "error": "Not valid GraphQL, can't prettify"
      },
      "copy": {
        "query": "Copy query (shift + c)",
        "response": "Copy response (shift + alt + c)",
        "done": "Copied!"
      },
      "download": "Download (JSON) (shift + d)",
      "apiConnection": "Connect your API"
    },
    "response": {
      "error": "{{fieldName}} have an invalid JSON format. Please fix the errors and try once again."
    },
    "errors": {
      "execute": "The query has failed. Check your API or internet connection and try again.",
      "failedFetch": "Failed to fetch the GraphQL Schema. Check your API."
    }
  },
  "notFound": {
    "title": "PAGE NOT FOUND",
    "subtitle": "the page you are looking for doesn`t exist",
    "homeLink": "go home"
  },
  "docs": {
    "header": {
      "title": "Docs"
    },
    "explorer": {
      "title": "A GraphQL schema provides a root type for each kind of operation.",
      "sectionTitleField": "Fields",
      "sectionTitleRoot": "Root Types",
      "sectionTitleAll": "All Schema Types"
    },
    "search": {
      "placeholder": "Search (Shift + ⌘ + K)",
      "notFound": "No results found"
    }
  },
  "modals": {
    "shortcuts": {
      "title": "Shortcuts",
      "columns": {
        "keys": "Shortcut",
        "functions": "Function"
      },
      "function": {
        "search": "Search in documentation",
        "query": "Execute query",
        "prettify": "Prettify editors",
        "copy": "Copy query",
        "refetch": "Re-fetch schema using introspection",
        "download": "Download response in JSON format"
      },
      "message": "The editors use CodeMirror Key Maps that add more shortcuts."
    },
    "settings": {
      "title": "Settings",
      "cache": {
        "title": "Enable cache",
        "subtitle": "All GraphQL requests will be cached. The same requests will not execute twice.",
        "toggler": {
          "on": "On",
          "off": "Off"
        }
      },
      "stats": {
        "title": "Show statistics",
        "subtitle": "Enables response indicator to show some useful data (cache, timing).",
        "toggler": {
          "on": "On",
          "off": "Off"
        }
      },
      "clear": {
        "title": "Clear storage",
        "subtitle": "Remove all cloud-synced data and start fresh. It will not delete your account.",
        "button": {
          "text": "Clear data",
          "popup": {
            "title": "Clear cloud-synced data?",
            "subtitle": "Are you sure to remove the data? Action cannot be undone.",
            "confirm": "Yes",
            "cancel": "No"
          }
        }
      }
    }
  },
  "developersList": {
    "alesiaAbaeva": "Alesia Abaeva",
    "olegKolosov": "Oleg Kolosov",
    "mariaErmolaeva": "Maria Ermolaeva"
  },
  "firebaseIndicator": {
    "success": {
      "text": "Saved",
      "tooltip": "All changes saved to Firestore"
    },
    "processing": {
      "text": "Saving...",
      "tooltip": "Syncing data with Firestore"
    },
    "error": {
      "text": "Error",
      "tooltip": "Firestore update failed"
    },
    "userDataLoading": {
      "text": "Loading...",
      "tooltip": "Syncing data with Firestore"
    }
  },
  "loader": "Loading...",
  "firestoreErrors": {
    "getData": "Getting data from Firestore failed",
    "updateData": "Firestore update failed",
    "createData": "Creating Firestore docs failed",
    "accountExists": "Account with this Email already exists",
    "networkFailed": "Network request failed, check your Internet connection",
    "wrongPassword": "Wrong password, try again",
    "noUser": "User not found, sign up first or use different account"
  },
  "errorBoundary": {
    "errorTitle": "An error occurred",
    "defaultMsg": "Something went wrong",
    "errorReset": "Try again",
    "errorReload": "Try to reload",
    "errorSignOut": "There was an error while signing out"
  }
}
